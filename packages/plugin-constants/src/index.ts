import * as fs from "node:fs/promises";
import * as path from "node:path";
import plugin from "tailwindcss/plugin";

const exported = (def: string) => `export ${def}`;
const constant = (name: string, def: string) => `const ${name} = ${def};`;
const type = (name: string, def: string) => `type ${name} = ${def};`;
const union = (values: any[]) => values.join(" | ");
const json = (value: any) => JSON.stringify(value, null, 2);

export function constants(filename: string): ReturnType<typeof plugin> {
  return plugin(({ config }) => {
    const cfg = config();
    const breakpoints = cfg.theme?.screens ?? {};

    const defs = [
      "/* eslint-disable-file */",
      `// Autogenerated from tailwind config, any changes will be overwritten.`,
      exported(type("Breakpoint", union(Object.keys(breakpoints).map(json)))),
      exported(constant("Breakpoints", json(breakpoints))),
    ];

    fs.writeFile(path.resolve(filename), defs.join("\n"), "utf-8")
      // eslint-disable-next-line no-console
      .then(() => console.log(`[tailwind] Types generated at ${filename}`))
      // eslint-disable-next-line no-console
      .catch((e: unknown) => console.error(`[tailwind] Could not generate types at ${filename}`, e));
  });
}
